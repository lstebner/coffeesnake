// Generated by CoffeeScript 1.6.3
var SnakeGame, World;

SnakeGame = (function() {
  function SnakeGame(container, opts) {
    if (opts == null) {
      opts = {};
    }
    this.container = $(container);
    this.set_opts(opts);
    this.snake = this.create_snake();
    this.apple = this.create_apple();
    this.rendered = false;
    this.ticks = 0;
    this.game_speeds = [5, 3];
    this.set_game_speed(this.opts.game_speed);
    this.paused = false;
    this.setup_events();
    this.update();
  }

  SnakeGame.prototype.set_opts = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return this.opts = _.extend(opts, {
      cols: 40,
      rows: 20,
      game_speed: 0
    });
  };

  SnakeGame.prototype.set_game_speed = function(speed_idx) {
    return this.game_speed = this.game_speeds[speed_idx];
  };

  SnakeGame.prototype.create_snake = function() {
    return {
      x: this.opts.cols / 2,
      y: this.opts.rows / 2,
      x_velocity: 0,
      y_velocity: 0,
      length: 2,
      speed: 1,
      max_speed: 6,
      moved: true
    };
  };

  SnakeGame.prototype.create_apple = function() {
    var x, y;
    x = Math.floor(Math.random() * this.opts.cols);
    y = Math.floor(Math.random() * this.opts.rows);
    return {
      x: x,
      y: y,
      moved: true,
      eaten: false
    };
  };

  SnakeGame.prototype.move_apple = function() {
    return this.apple = this.create_apple();
  };

  SnakeGame.prototype.setup_events = function() {
    var down, left, right, up,
      _this = this;
    up = [38];
    down = [40];
    left = [37];
    right = [39];
    return $(document.body).on('keydown', function(e) {
      if (_.indexOf(up, e.keyCode) > -1) {
        _this.move_snake('up');
      }
      if (_.indexOf(down, e.keyCode) > -1) {
        _this.move_snake('down');
      }
      if (_.indexOf(left, e.keyCode) > -1) {
        _this.move_snake('left');
      }
      if (_.indexOf(right, e.keyCode) > -1) {
        return _this.move_snake('right');
      }
    });
  };

  SnakeGame.prototype.set_snake_velocity = function(x, y) {
    this.snake.x_velocity = x;
    return this.snake.y_velocity = y;
  };

  SnakeGame.prototype.move_snake = function(dir) {
    var east, north, south, west;
    north = ['n', 'north', 'up', 'u'];
    east = ['e', 'east', 'right', 'r'];
    west = ['w', 'west', 'left', 'l'];
    south = ['s', 'south', 'down', 'd'];
    if (_.indexOf(north, dir) > -1) {
      this.set_snake_velocity(0, -1);
    }
    if (_.indexOf(west, dir) > -1) {
      this.set_snake_velocity(-1, 0);
    }
    if (_.indexOf(east, dir) > -1) {
      this.set_snake_velocity(1, 0);
    }
    if (_.indexOf(south, dir) > -1) {
      return this.set_snake_velocity(0, 1);
    }
  };

  SnakeGame.prototype.update = function() {
    var fn,
      _this = this;
    fn = function() {
      if (_this.paused) {
        return;
      }
      _this.ticks += 1;
      if (_this.ticks % _this.game_speed === 0) {
        _this.update_snake();
        _this.update_apple();
        _this.did_snake_eat_apple();
      }
      _this.render();
      return _this.timeout = setTimeout(fn, 1000 / 30);
    };
    return fn();
  };

  SnakeGame.prototype.update_snake = function() {
    var start_x, start_y;
    start_x = this.snake.x;
    start_y = this.snake.y;
    this.snake.x = Math.max(0, Math.min(this.opts.cols - 1, this.snake.x + this.snake.x_velocity));
    this.snake.y = Math.max(0, Math.min(this.opts.rows - 1, this.snake.y + this.snake.y_velocity));
    return this.snake.moved = this.snake.x !== start_x || this.snake.y !== start_y;
  };

  SnakeGame.prototype.update_apple = function() {
    if (this.apple.eaten) {
      this.move_apple();
      return this.grow_snake();
    }
  };

  SnakeGame.prototype.did_snake_eat_apple = function() {
    if (this.snake.x === this.apple.x && this.snake.y === this.apple.y) {
      return this.apple.eaten = true;
    }
  };

  SnakeGame.prototype.grow_snake = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.snake.length += amount;
  };

  SnakeGame.prototype.render = function() {
    var $grid, $row, grid, x, y, _i, _j, _ref, _ref1;
    if (!this.rendered) {
      this.rendered = true;
      grid = [];
      for (y = _i = 0, _ref = this.opts.rows; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        $row = $("<div/>").addClass("row").attr("data-y", y);
        for (x = _j = 0, _ref1 = this.opts.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          $grid = $("<div/>").addClass("cell").attr("data-x", x);
          $row.append($grid);
        }
        this.container.append($row);
      }
    }
    this.render_snake();
    return this.render_apple();
  };

  SnakeGame.prototype.cell_selector = function(x, y) {
    return ".row[data-y=" + y + "] .cell[data-x=" + x + "]";
  };

  SnakeGame.prototype.render_snake = function() {
    if (this.snake.moved) {
      this.snake.moved = false;
      this.container.find('.cell.snake').removeClass('snake');
      return this.container.find(this.cell_selector(this.snake.x, this.snake.y)).addClass('snake');
    }
  };

  SnakeGame.prototype.render_apple = function() {
    if (this.apple.moved) {
      this.apple.moved = false;
      this.container.find('.cell.apple').removeClass('apple');
      return this.container.find(this.cell_selector(this.apple.x, this.apple.y)).addClass('apple');
    }
  };

  return SnakeGame;

})();

World = {};

$(function() {
  return World.snake = new SnakeGame("#snake");
});
